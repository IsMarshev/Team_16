import os
import requests
from PIL import Image
from io import BytesIO
from typing import Dict, Any, List, Optional
import re


# --- LangChain –∏ LangGraph –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ---
from langchain_core.messages import BaseMessage, HumanMessage
from langchain_core.language_models import BaseChatModel
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph, END
from typing_extensions import TypedDict

# --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF ---
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import Paragraph, Spacer, Image as ReportLabImage
from reportlab.lib.units import inch


# --- 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥—Ä–∞—Ñ–∞ (State) ---

class ReportData(TypedDict):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞."""
    graph_urls: List[str]
    graph_descriptions: List[str]
    annotations: List[str]
    news_links: List[str]
    news_articles: List[str]
    aggregated_news: List[str]


class ReportGenerationState(TypedDict):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥—Ä–∞—Ñ–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.
    –û–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –æ—Ç —É–∑–ª–∞ –∫ —É–∑–ª—É.
    """
    messages: List[BaseMessage]      # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
    report_data: ReportData          # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    article_content: Optional[str]   # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LLM —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
    pdf_path: Optional[str]          # –ü—É—Ç—å –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É PDF —Ñ–∞–π–ª—É



class ArticleWriterAgent:
    """
    –ê–≥–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –û–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑.
    """
    
    def __init__(self, llm: BaseChatModel):
        self.llm = llm
        self.system_prompt = self._create_system_prompt()
        self.prompt_template = ChatPromptTemplate.from_messages([
            ("system", self.system_prompt),
            ("human", "{input_text}")
        ])
        self.chain = self.prompt_template | self.llm

    def _create_system_prompt(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–æ–ª–∏ –ø–∏—Å–∞—Ç–µ–ª—è-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞."""
        return """
            –†–æ–ª—å: –¢—ã –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–æ–Ω–æ–º–µ—Ç—Ä–∏—Å—Ç –∏ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—Å—Ç. –ó–∞–¥–∞—á–∞: —Ç–µ–±–µ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–æ–ª—å—à–æ–π –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–π BVAR –º–æ–¥–µ–ª–∏. –≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - —Å—Ç—É–¥–µ–Ω—Ç—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞. –¢–≤–æ–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã —É–∂–µ –æ–ø–∏—Å–∞–ª–∏ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äì —Ç–æ –µ—Å—Ç—å IRF, —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —à–æ–∫–æ–≤ –∏ –∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ (—Å —Ä–∞–∑–Ω—ã–º–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º–∏) –≤–∫–ª—é—á–∞—è –ø—Ä–æ–≥–Ω–æ–∑. –†–µ–∑—É–ª—å—Ç–∞—Ç: —Ç–µ–±–µ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –≤–≤–µ–¥–µ–Ω–∏–µ–º, –≥–ª–∞–≤–æ–π –ø—Ä–æ IRF, —Ä–∞–∑–±–∏—Ç–æ–π –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –ø–æ —à–æ–∫–∞–º, –≥–ª–∞–≤–æ–π –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ, —Ä–∞–∑–±–∏—Ç–æ–π –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –ø–æ–¥–ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è, –≥–ª–∞–≤–æ–π –ø–æ —à–æ–∫–∞–º –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–æ–≤–æ—Å—Ç—è–º –∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º (–µ—Å–ª–∏ —Ç–≤–æ–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã —Å–ø—Ä–∞–≤—è—Ç—Å—è), –∏ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ ‚Äì –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ 2-3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≥–¥–µ –±—É–¥–µ—Ç –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç–æ —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ç–µ–∫—Å—Ç—ã –æ–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–≤–æ–∏–º–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏. –í—ã—Ö–æ–¥: —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ —Å —Ä—É–±—Ä–∏–∫–∞—Ü–∏–µ–π. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏: BVAR —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ–º–ø—ã —Ä–æ—Å—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ç—Ä–∞—Å–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏ –†–§, –ø–ª—é—Å —Ç–µ–º–ø —Ä–æ—Å—Ç–∞ —Ü–µ–Ω –Ω–∞ –Ω–µ—Ñ—Ç—å, –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏ —Ç–µ–º–ø —Ä–æ—Å—Ç–∞ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–º–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞. –î–∞–Ω–Ω—ã–µ –µ–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ. –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —à–æ–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é –∑–Ω–∞–∫–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∏ –Ω—É–ª–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –Ω–µ—Ñ—Ç–∏(—à–æ–∫–∏ –†–§ –Ω–∞ –Ω–µ–µ –Ω–µ –≤–ª–∏—è—é—Ç, –≤ –º–æ–º–µ–Ω—Ç –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏). –ú–æ–¥–µ–ª—å –≤–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ä–∞–∑—Ä—ã–≤ 2022 –≥–æ–¥–∞ (–¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤), –ø–æ—Å—Ç–µ—Ä–∏–æ—Ä BVAR –º–æ–¥–µ–ª–∏ –æ—Ü–µ–Ω–µ–Ω–Ω–æ–π –¥–æ —Ä–∞–∑—Ä—ã–≤–∞ –ø–æ—Å–ª–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–∞–π–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä—ã–≤–∞. –ü–µ—Ä–∏–æ–¥ –æ—Ü–µ–Ω–∫–∏ —Å 2016q2(–ø–µ—Ä–≤—ã–π –≥–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –æ–Ω –±—ã–ª –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ –ª–∞–≥–æ–≤ –ø–æ marginalLikelihood - —Ç—É—Ç —É–∂–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ) –ø–æ 2024q4. –í—Å–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã BVAR –º–æ–¥–µ–ª–∏, –≤–∫–ª—é—á–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–∞ –¥–æ —Ä–∞–∑—Ä—ã–≤–∞ –≤ –ø—Ä–∞–π–æ—Ä –ø–æ—Å–ª–µ, –æ—Ü–µ–Ω–∏–≤–∞–ª–∏—Å—å –º–µ—Ç–æ–¥–æ–º –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ marginalLikelihood. –°–ø–∏—Å–æ–∫ –æ—Ç—Ä–∞—Å–ª–µ–π —Å–ª–µ–¥—É—é—â–∏–π: A —ç—Ç–æ –°–µ–ª—å—Å–∫–æ–µ, –ª–µ—Å–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ, –æ—Ö–æ—Ç–∞, —Ä—ã–±–æ–ª–æ–≤—Å—Ç–≤–æ –∏ —Ä—ã–±–æ–≤–æ–¥—Å—Ç–≤–æ; B —ç—Ç–æ –î–æ–±—ã—á–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö; C —ç—Ç–æ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞; F —ç—Ç–æ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ; G —ç—Ç–æ –¢–æ—Ä–≥–æ–≤–ª—è –æ–ø—Ç–æ–≤–∞—è –∏ —Ä–æ–∑–Ω–∏—á–Ω–∞—è; —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤; H —ç—Ç–æ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ; J —ç—Ç–æ –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–≤—è–∑–∏; K —ç—Ç–æ –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞—è; L —ç—Ç–æ –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º —Å –Ω–µ–¥–≤–∏–∂–∏–º—ã–º –∏–º—É—â–µ—Å—Ç–≤–æ–º; M —ç—Ç–æ –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è, –Ω–∞—É—á–Ω–∞—è –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è; O —ç—Ç–æ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏; —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ; P —ç—Ç–æ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ; Q —ç—Ç–æ –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥. –ê –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã —Ç–≤–æ–∏—Ö –ø–æ–º–æ—à–Ω–∏–∫–æ–≤:
            –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ 
            –û—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown
        """ 

    def _format_input_for_llm(self, report_data: ReportData) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è LLM."""
        input_parts = []
        input_parts.append("### –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞):\n" + "\n".join(report_data['aggregated_news']))
        
        for i, graph_url in enumerate(report_data['graph_urls']):
            input_parts.append(f"\n--- –î–∞–Ω–Ω—ã–µ –¥–ª—è –ì—Ä–∞—Ñ–∏–∫–∞ {i+1} ---")
            input_parts.append(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫: {graph_url}")
            if i < len(report_data['graph_descriptions']):
                input_parts.append(f"–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞: {report_data['graph_descriptions'][i]}")
            if i < len(report_data['annotations']):
                input_parts.append(f"–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: {report_data['annotations'][i]}")
            if i < len(report_data['news_articles']):
                input_parts.append(f"–°–≤—è–∑–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å: {report_data['news_articles'][i]}")
                if i < len(report_data['news_links']):
                     input_parts.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–∏: {report_data['news_links'][i]}")

        return "\n".join(input_parts)

    def __call__(self, state: ReportGenerationState) -> ReportGenerationState:
        """–í—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞ –∫–∞–∫ —É–∑–ª–∞ –≥—Ä–∞—Ñ–∞."""
        print("--- ‚úçÔ∏è  –í—ã–∑–æ–≤ –ê–≥–µ–Ω—Ç–∞-–ü–∏—Å–∞—Ç–µ–ª—è ---")
        
        report_data = state['report_data']
        formatted_input = self._format_input_for_llm(report_data)
        
        # –í—ã–∑—ã–≤–∞–µ–º LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏
        response = self.chain.invoke({"input_text": formatted_input})
        
        print("--- ‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ---")
        # print(response.content) # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        clear_response = response.content.replace('```markdown', '').replace('```', "")
        
        return {
            **state,
            "article_content": clear_response
        }


# --- 3. –£–∑–µ–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF ---

def generate_pdf_node(state: ReportGenerationState) -> ReportGenerationState:
    """
    –£–∑–µ–ª –≥—Ä–∞—Ñ–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç PDF-—Ñ–∞–π–ª –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤.
    """
    print("--- üìÑ –í—ã–∑–æ–≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ PDF ---")
    
    article_text = state.get("article_content")
    if not article_text:
        raise ValueError("–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
        
    report_data = state['report_data']
    output_filename = "analytical_report.pdf"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    c = canvas.Canvas(output_filename, pagesize=letter)
    width, height = letter
    styles = getSampleStyleSheet()
    
    # –î–æ–±–∞–≤–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    styles.add(ParagraphStyle(name='ReportTitle', fontSize=24, leading=28, alignment=1, spaceAfter=20))
    
    story = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    story.append(Paragraph("–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç", styles['ReportTitle']))

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º –≥—Ä–∞—Ñ–∏–∫–æ–≤
    text_parts = article_text.split('[GRAPH_')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    story.append(Paragraph(text_parts[0].replace('\n', '<br/>'), styles['BodyText']))
    story.append(Spacer(1, 0.2 * inch))

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    for i, part in enumerate(text_parts[1:]):
        # part –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ "1] –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞..."
        # –ù–∞–º –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
        try:
            text_after_graph = part.split(']', 1)[1]
            graph_index = i
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if graph_index < len(report_data['graph_urls']):
                url = report_data['graph_urls'][graph_index]
                try:
                    print(f"--- üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞: {url} ---")
                    response = requests.get(url)
                    response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Pillow –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    pil_image = Image.open(BytesIO(response.content))
                    
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    max_width = width - 2 * inch
                    max_height = height / 3 # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã—Å–æ—Ç—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    pil_image.thumbnail((max_width, max_height), Image.Resampling.LANCZOS)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è ReportLab
                    img_path = f"temp_graph_{graph_index}.png"
                    pil_image.save(img_path)
                    
                    story.append(ReportLabImage(img_path, width=pil_image.width, height=pil_image.height))
                    story.append(Spacer(1, 0.2 * inch))

                except Exception as e:
                    print(f"--- ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ {url}: {e} ---")
                    story.append(Paragraph(f"[–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ {graph_index + 1}]", styles['BodyText']))

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≥—Ä–∞—Ñ–∏–∫–∞
            story.append(Paragraph(text_after_graph.replace('\n', '<br/>'), styles['BodyText']))
            story.append(Spacer(1, 0.2 * inch))

        except IndexError:
            # –ï—Å–ª–∏ –≤ —á–∞—Å—Ç–∏ –Ω–µ—Ç ']', –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
            story.append(Paragraph(part.replace('\n', '<br/>'), styles['BodyText']))
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    story_frame = c.beginText(inch, height - inch)
    doc_width = width - 2*inch
    
    # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞. –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å platypus.Frame
    y_pos = height - inch
    for item in story:
        item_height = item.wrap(doc_width, height)[1]
        if y_pos - item_height < inch:
            c.showPage() # –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            y_pos = height - inch
        
        item.drawOn(c, inch, y_pos - item_height)
        y_pos -= (item_height + item.style.spaceAfter)

    c.save()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for i in range(len(report_data['graph_urls'])):
        img_path = f"temp_graph_{i}.png"
        if os.path.exists(img_path):
            os.remove(img_path)
            
    print(f"--- ‚úÖ PDF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {output_filename} ---")
    
    return {
        **state,
        "pdf_path": output_filename
    }

